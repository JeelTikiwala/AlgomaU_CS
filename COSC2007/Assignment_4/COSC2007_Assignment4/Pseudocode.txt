Algorithm/Pseudocode
	1. Construct 2-3 Tree
	2. For each key to be inserted:
	If the tree is empty, create a root node with the key.
	Otherwise, recursively find the correct leaf node where the key should be inserted.
	If the leaf node has less than 2 keys, simply insert the key in sorted order.
		If the leaf node has 2 keys, splitting is required:
		Create a new parent node if necessary.
		Split the leaf node into two nodes, each with one key, and promote the middle key to the new or existing parent.
		If the parent node gets overflowed (more than 2 keys), repeat the splitting process up the tree.
	3.Repeat until all keys are inserted.

	2. Search for a Key in 2-3 Tree
		1. Start at the root.
		2. While the current node is not null:
			If the current node contains the key, return true (key found).
			Else, move to the child node that could contain the key based on its value.
3. If the key is not found in the tree, return false.

3. Delete a Leaf Node with a Single Key
		1. Search for the node with the given key.
		2. If the node is a leaf and contains only one key:
			Remove the key from the node.
			If this causes the parent node to have less than one key, rebalance the tree:
				Try to redistribute keys from a sibling node.
				If redistribution is not possible, merge with a sibling node and promote a key from the parent.
				If the parent node is left with less than one key, repeat the rebalance process up the tree.
	Else, do not delete the node.